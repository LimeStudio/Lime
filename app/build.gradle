apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'jacoco'
apply plugin: 'kotlin-allopen'

jacoco {
    toolVersion = "0.8.2"
}
allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.lime.testing.OpenClass'
}
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def keyStoreFile = file(keystoreProperties['storeFileLocal'])

if (!keyStoreFile.exists()) {
    keyStoreFile = file(keystoreProperties['storeFileCI'])
}


android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPwd']
            storeFile keyStoreFile
            storePassword keystoreProperties['storePwd']
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.moi.lime"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.moi.lime.util.LimeTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            testCoverageEnabled = true
        }
        debug {
            testCoverageEnabled = true
        }
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests {
            all {
                jvmArgs '-noverify', '-ea'
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
    androidExtensions {
        experimental = true

    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //kotlin
    implementation deps.kotlin.stdlib
    //lifecycle
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    kapt deps.lifecycle.compiler
    //room
    implementation deps.room.runtime
    implementation deps.room.rxjava2
    kapt deps.room.compiler
    //paging
    implementation deps.paging.runtime
    implementation deps.paging.rxjava2
    //workManager
    implementation deps.work.runtime_ktx
    //navigation
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx
    //constraintLayout
    implementation deps.constraintlayout.constraintlayout_solver
    implementation deps.constraintlayout.constraintlayout
    //support
    implementation deps.support.material
    implementation deps.support.appcompat
    implementation deps.support.recyclerview
    implementation deps.support.annotation
    implementation deps.support.legacy_support_core_utils
    implementation deps.support.legacy_support_v4
    implementation deps.support.ktx
    //glide
    implementation deps.glide.core
    kapt deps.glide.compiler
    //rxJava
    implementation deps.rxjava2
    //rxAndroid
    implementation deps.rx_android
    //retrofit
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.retrofit.mock
    implementation deps.retrofit.rxjava2
    //dagger
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    //cookie
    implementation deps.persistent_cookie_jar

    //test
    testImplementation deps.kotlin.test
    testImplementation deps.junit
    testImplementation deps.retrofit.mock
    testImplementation deps.mock_web_server
    testImplementation deps.mockito.core
    androidTestImplementation deps.mockito.core
    androidTestImplementation deps.mockito.android

    // Core library
    androidTestImplementation deps.androidx_test_core

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation deps.runner.runner
    androidTestImplementation deps.runner.rules

    // Assertions
    androidTestImplementation deps.android_junit.junit
    androidTestImplementation deps.android_junit.truth

    // Espresso dependencies
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib

    //JetPack test
    testImplementation deps.arch_core.testing
    androidTestImplementation deps.arch_core.testing

    //support
    androidTestImplementation deps.support.appcompat
    androidTestImplementation deps.support.recyclerview
    androidTestImplementation deps.support.cardview
    androidTestImplementation deps.support.material
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
//
//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter) + fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: project.projectDir, includes: [
//            'build/jacoco/testDebugUnitTest.exec', '*.exec'
//    ])
//}
//
//task jacocoUITestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter) + fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: project.projectDir, includes: [
//            'coverage_reports/*.exec'
//    ])
//}
//
task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter) + fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes: [
            'build/jacoco/testDebugUnitTest.exec'
    ])
}
